
// NOTE READY, just parser test.

typedef Retry = forall p.rec X.( ( rw p (Held#[]) => rw p (Held#[]) ; X )
	(+) ( rw p (Released#int) => none ) )

typedef OneUse = forall p.( rw p (Held#[]) => rw p (Released#int) )

open <t,x> = new Held#{} in
	share t as (Retry[t]) || (OneUse[t]);
	//FIXME outside( <t,x> ); // packs 'OneUse[t]'
	fun Y(_:[]):int.( // FIXME argument and result are PLACE HOLDERS
		focus t;
		case !x of
			Held#n ->
				x := Held#n;
				defocus; // retry, did not consume shared type!
				Y {}// recursion point
		|	Released#n -> // recovers
				defocus;
				x := n; // FIXME + 1;
				// ...
				x := !x; // FIXME + 1;
				//...
				delete x
		end) {}
end