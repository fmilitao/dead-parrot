FIXME: exploits a visibility bug...

IS THIS A BUG? (i.e. unsound??)

//FAIL Invalid delete
//FAIL HOW TO TESTS THIS??

open <t,x> = new 0 in
	let f = fun( _ : [] :: rw t int ).
		( delete x; delete x; 0 )
		// FIXME second delete should not be allowed!!
	in
		f {}
	end
end
	


// note unfolds on use.

--- is it possible to delete twice if at multiple levels??

--- clean up typing environment code.
--- how to handle collisions? specially with capabilities?
--- merging environments with different caps
--- stacking alternatives.
	3. Add alternatives, will require multiple typing environments. Perhaps
	even multiple return types for each of the different alternatives.
	4. Find a better way to merge environment and types, so as to allow
	alternatives.
	
5. Add rely and guarantee types. Including focus, defocus, sharing and
framing of the defocus-guarantee.
6. Add a conevienet way to type check a stdlib. This means that we need to
allow types to be created outside the scope of the function below. Probably
the type constructors should be used directly by the library.

=========================================

REMEMBER:
 	- to disable chrome's cache
 	- launch 'static' on trunk/
 	
 	FIXME: recursive types on subtyping, equals and unAll may be infinite...
 	- IDIOT YOU ARE USING RECURSION WHEN WHILE IS ENOUGH...
 	
TODO:
	-- packing up to subtyping, instead of equals? list-adt example would
	be made slightly simpler, I guess.
	-- multi-open and multi-pack syntax sugar? use arrays of stuff
	open <a,b,c,d,x> = <p,q,X, ... >
	
=========================================

- location variables cannot be hidden, or renamed
- try to stack all "touched" capabilities at the end of a method.

- Typing algorithm:
	- name collisions should not be allowed, no crap about hidding.
(if the variable is hidden it may cause leaks)... renaming is
always possible anyway.

- check that OPEN does not produce a resulting environment/type that
depends on scoped types.
	
=========================================

LOW PRIORITY:
 - define better parsing priorities to reduce use of parenthesis.
 	"fun( x ) . e := 2" should work directly, maybe?
 	might be messy to do with the share construct.

CODE STYLE:
 	--- ALWAYS USE IDENTITY === and !==
	- use 'instanceof' instead of has property 'ast' for errors
	+ use finally for exceptions?
	- CONSTANTS ARE CAPPED
	- console.debug for debug messages
	- console.error for error messages, it prints stack trace!
	- https://developers.google.com/chrome-developer-tools/docs/console
